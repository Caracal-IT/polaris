import { registerInstance as __stencil_registerInstance, getElement as __stencil_getElement } from "@stencil/core";
import { HttpService } from "../../services/http.service";
import { ModelService } from "../../services/model.service";
import { ConfigService } from "../../services/config.service";
import { WorkflowService } from "../../services/workflow.service";
export const PolarisWorkflow = class {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.page = this;
        this.model = new ModelService();
        this.http = new HttpService(this);
        this.config = new ConfigService();
        this.wf = new WorkflowService(this);
        this._components = [];
    }
    processChangeHandler() {
        console.log("Process Change");
        this.render();
    }
    get components() { return this._components; }
    set components(val) { this._components = val; this.render(); }
    load(process, next = "start") {
        this.wf.setProcess(process, next);
    }
    componentDidLoad() {
        if (this.process)
            this.load(this.process);
    }
    render() {
        console.log(this.process);
        for (let i = this.el.childNodes.length - 1; i >= 0; i--)
            this.el.removeChild(this.el.childNodes[i]);
        this.components.forEach(this.renderComponent.bind(this, this.el));
    }
    renderComponent(parent, config) {
        const el = document.createElement(config.tag);
        const options = {
            "wf-Workflow": "",
            "ctx": this
        };
        const newEl = Object.assign(el, config, options);
        if (newEl.id && newEl.value !== undefined) {
            const newValue = this.model.getValue(newEl.id);
            if (newValue !== undefined)
                newEl.value = newValue;
            this.model.setValue(newEl.id, newEl.value);
            newEl.onchange = (event) => this.model.setValue(event.target.id, event.target.value);
        }
        if (config.controls)
            config.controls.forEach(this.renderComponent.bind(this, newEl));
        parent.appendChild(newEl);
    }
    get el() { return __stencil_getElement(this); }
    static get watchers() { return {
        "process": ["processChangeHandler"]
    }; }
};
