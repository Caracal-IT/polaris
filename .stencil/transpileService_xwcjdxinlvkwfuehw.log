{"moduleFile":{"sourceFilePath":"D:/Development/Labs/Ettiene/polaris/src/services/model.service.ts","jsFilePath":"D:/Development/Labs/Ettiene/polaris/src/services/model.service.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"export class ModelService {\r\n    constructor() {\r\n        this.model = {};\r\n    }\r\n    getValue(key, model = this.model) {\r\n        const val = key.split(\".\").reduce((total, currentElement) => total ? total[currentElement] : undefined, Object.assign({}, model));\r\n        return val;\r\n    }\r\n    setValue(key, val) {\r\n        this.model = this.merge(this.model, key, val);\r\n    }\r\n    merge(model, name, value) {\r\n        if (!name)\r\n            return;\r\n        let newModel = Object.assign({}, model);\r\n        name\r\n            .split(\".\")\r\n            .reduce((total, current, index, arr) => {\r\n            total[current] = index == arr.length - 1 ? value : Object.assign({}, total[current]);\r\n            return total[current];\r\n        }, newModel);\r\n        return newModel;\r\n    }\r\n}\r\n"}