import { HttpService } from "../../services/http.service";
import { ModelService } from "../../services/model.service";
import { ConfigService } from "../../services/config.service";
import { WorkflowService } from "../../services/workflow.service";
export class PolarisWorkflow {
    constructor() {
        this._controls = [];
        this.page = this;
        this.model = new ModelService();
        this.http = new HttpService(this);
        this.config = new ConfigService();
        this.wf = new WorkflowService(this);
    }
    processChangeHandler() {
        this.render();
    }
    get components() { return this._controls; }
    set components(val) {
        this._controls = val || [];
        this.render();
    }
    load(process, next = "start") {
        this.wf.setProcess(process, next);
    }
    render() {
        for (let i = this.el.childNodes.length - 1; i >= 0; i--)
            this.el.removeChild(this.el.childNodes[i]);
        this.components.forEach(this.renderComponent.bind(this, this));
    }
    renderComponent(parent, config) {
        const el = document.createElement(config.tag);
        const options = {
            "wf-Workflow": "",
            "ctx": this
        };
        const newEl = Object.assign(el, config, options);
        if (newEl.id && newEl.value !== undefined) {
            const newValue = this.model.getValue(newEl.id);
            if (newValue !== undefined)
                newEl.value = newValue;
            this.model.setValue(newEl.id, newEl.value);
            newEl.onchange = (event) => this.model.setValue(event.target.id, event.target.value);
        }
        if (config.controls)
            config.controls.forEach(this.renderComponent.bind(this, newEl));
        parent.appendChild(newEl);
    }
    static get is() { return "polaris-workflow"; }
    static get properties() {
        return {
            "tag": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "tag",
                "reflect": false
            },
            "ctx": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Context",
                    "resolved": "Context",
                    "references": {
                        "Context": {
                            "location": "import",
                            "path": "../../model/context.model"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "value": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "value",
                "reflect": false
            },
            "process": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string|object",
                    "resolved": "object | string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "process",
                "reflect": false
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "process",
                "methodName": "processChangeHandler"
            }];
    }
}
