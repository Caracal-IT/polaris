{"moduleFile":{"sourceFilePath":"D:/Development/Labs/Ettiene/polaris/src/activities/api.activity.ts","jsFilePath":"D:/Development/Labs/Ettiene/polaris/src/activities/api.activity.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"export class ApiActivity {\r\n    constructor() {\r\n        this.name = \"start\";\r\n        this.type = \"api-activity\";\r\n    }\r\n    async execute() {\r\n        if (this.endpoints && this.endpoints.length > 0)\r\n            this.callEndpoints();\r\n        else if (this.next && this.ctx)\r\n            this.gotoNext();\r\n        return true;\r\n    }\r\n    callEndpoints() {\r\n        if (!this.ctx || !this.ctx.http || !this.endpoints)\r\n            return;\r\n        let counter = 0;\r\n        const fetch = this.callEndpoint.bind(this, this.ctx.http);\r\n        this.endpoints\r\n            .forEach(e => {\r\n            counter++;\r\n            e.body = this.getBody(e);\r\n            fetch(e).finally(() => {\r\n                counter--;\r\n                if (counter === 0)\r\n                    this.gotoNext();\r\n            });\r\n        });\r\n    }\r\n    async callEndpoint(http, endpoint) {\r\n        if (!this.ctx || !this.ctx.config)\r\n            return;\r\n        return http.fetch(endpoint)\r\n            .then(data => this.setModel(endpoint, data));\r\n    }\r\n    gotoNext() {\r\n        if (this.next && this.ctx)\r\n            this.ctx.wf.goto(this.next);\r\n    }\r\n    getBody(endpoint) {\r\n        if (!this.ctx || !this.ctx.model || endpoint.method.toUpperCase() === \"GET\" || endpoint.method.toUpperCase() === \"DELETE\")\r\n            return null;\r\n        const model = this.ctx.model;\r\n        const mappings = endpoint.mappings;\r\n        let body = {};\r\n        mappings\r\n            .filter(m => m.direction === 'out' || m.direction === 'inout')\r\n            .forEach(m => Object.assign(body, { [m.client]: model.getValue(m.client) }));\r\n        return JSON.stringify(body);\r\n    }\r\n    setModel(endpoint, data) {\r\n        if (!this.ctx || !this.ctx.model)\r\n            return;\r\n        const model = this.ctx.model;\r\n        const mappings = endpoint.mappings;\r\n        if (!mappings || mappings.length === 0)\r\n            return Object.keys(data).forEach(k => model.setValue(k, data[k]));\r\n        mappings\r\n            .filter(m => m.direction === 'in' || m.direction === 'inout')\r\n            .forEach(m => model.setValue(m.client, model.getValue(m.remote, data)));\r\n    }\r\n}\r\n"}